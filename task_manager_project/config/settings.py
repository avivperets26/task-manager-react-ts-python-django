"""
Django settings for task_manager_project project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import redis
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = 'django-insecure-z_qs!wua&r9blta3w4u_9uhomy2v=70_c72a*968xzp0)isq13'
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'local.dev']

# URL Configuration
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # Django template backend
        'DIRS': [],   # List of directories where Django should look for templates
        'APP_DIRS': True,  # Allows Django to look for templates within each application.
        'OPTIONS': { # Template options
            'context_processors': [ # Context processors
                'django.template.context_processors.debug', # Include debug information in the context
                'django.template.context_processors.request',  # Crucial for admin to function properly.
                'django.contrib.auth.context_processors.auth', # Include the user's authentication information in the context
                'django.contrib.messages.context_processors.messages', # Include the messages framework in the context
            ],
        },
    },
]

# Application definition
INSTALLED_APPS = [
    'corsheaders', # Add the CORS headers app
    'django.contrib.admin', # Django admin app
    'django.contrib.auth', # Django authentication app
    'django.contrib.contenttypes', # Django content types app
    'django.contrib.sessions', # Django sessions app
    'django.contrib.messages', # Django messages app 
    'django.contrib.staticfiles', # Django static files app
    'rest_framework', # Django REST framework
    'tasks', # Tasks app
    'analyzer',  # Ensure your analyzer app is listed
    'node',    # Ensure your node app is listed
]

REST_FRAMEWORK = { # REST framework settings
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5  # can adjust the number of items per page here
}

MIDDLEWARE = [ # Middleware classes
    'django.middleware.security.SecurityMiddleware', # Security middleware
    'django.contrib.sessions.middleware.SessionMiddleware', # Session middleware
    'django.middleware.common.CommonMiddleware', # Common middleware
    'django.middleware.csrf.CsrfViewMiddleware', # CSRF middleware
    'corsheaders.middleware.CorsMiddleware', # CORS middleware
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Authentication middleware
    'django.contrib.messages.middleware.MessageMiddleware', # Message middleware
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # Clickjacking middleware
]

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True # Allow all origins


CORS_ALLOW_CREDENTIALS = True # Allow credentials
CORS_ALLOWED_ORIGINS = [ # Allowed origins
    'http://localhost:5173',
    'http://localhost:3000',
]
CORS_ALLOW_METHODS = [ # Allowed methods
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [ # Allowed headers
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF and Session Settings
SESSION_COOKIE_SECURE = False # Set to True in production
CSRF_COOKIE_DOMAIN = None    # Set to your domain in production
CSRF_COOKIE_SECURE = False  # Set to True in production
SESSION_COOKIE_SAMESITE = 'Lax' # Set to 'None' in production
CSRF_COOKIE_SAMESITE = 'Lax' # Set to 'None' in production
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000', 'http://localhost:5173'] # Trusted origins
#CSRF_COOKIE_DOMAIN = 'http://localhost:5173'

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/' # Static URL
#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Static files directories
MEDIA_URL = '/media/' # Media URL
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Media root

# Database
DATABASES = { # Database settings
    'default': { # Default database
        'ENGINE': 'django.db.backends.sqlite3', # Database engine
        'NAME': BASE_DIR / 'db.sqlite3', # Database name
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [ # Password validators
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # User attribute similarity validator
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # Minimum length validator
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # Common password validator
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # Numeric password validator
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us' 
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Redis Configuration
REDIS_HOST = 'localhost' # Redis host
REDIS_PORT = 6379 # Redis port
REDIS_DB = 0 # Redis database number
REDIS_POOL = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB) # Redis connection pool
def get_redis_connection(): # Function to get a Redis connection
    return redis.Redis(connection_pool=REDIS_POOL) # Return a Redis connection

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' 

# Import local settings if exist
try:
    from .local_settings import *
except ImportError:
    pass